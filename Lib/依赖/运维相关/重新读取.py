import os
import time

from Lib.依赖.图片操作相关.图片压缩库 import ResizeImage
from Lib.依赖.图片操作相关.图片路径提取 import 图片路径提取
from Lib.依赖.数据库操作相关.图片信息资源管理器 import 图片信息资源管理器
from Lib.依赖.运维相关.路径控制 import 路径控制


# 压缩成功之后这个图片才是可以使用的
# 因此存入数据库的压缩图片的信息


def 重新读取_():
    count = 0
    while True:
        count = count + 1
        if count > 999:
            count = 0
        # print('重新读取：开启重新读取')
        time.sleep(5)

        图片信息资源 = 图片路径提取(路径控制.主站原始图片_路径())
        压缩图片信息资源 = 图片路径提取(路径控制.主站压缩图片_路径())

        for 图片名字 in 图片信息资源.keys():
            if not os.path.exists(os.path.join(路径控制.主站压缩图片_路径(), 图片名字)):
                print(f"重新读取：生成主页缩略图 {图片名字}")
                文件输入 = os.path.join(路径控制.主站原始图片_路径(), 图片名字)
                文件输出 = os.path.join(路径控制.主站压缩图片_路径(), 图片名字)
                ResizeImage(文件输入, 文件输出)
                #############################################################################
                # 本来这里应该存数据库里面的，但是后来这玩意儿由于要存标签于是这个工作就由审核系统接管了
                # 图片信息资源管理器.写入压缩图片信息资源(图片名字, 图片大小检测(
                #     os.path.join(路径控制.主站压缩图片_路径(), 图片名字)))

        for 图片名字 in 压缩图片信息资源.keys():
            try:
                if not os.path.exists(os.path.join(路径控制.主站原始图片_路径(), 图片名字)):
                    os.remove(os.path.join(路径控制.主站压缩图片_路径(), 图片名字))

                    print(f"重新读取：未发现对应的主站原始图片，删除主页缩略图 {图片名字}")

                    # 删除数据库中的对应数据
                    # 如果转义了可能会导致无法删除，因此要阻止转义

                    # 如果是第一次运行，就有路径，第二次运行，从数据库中取出带有路径的，因此要阻止路径
                    图片信息资源管理器.删除压缩图片信息资源(图片名字)
            except FileNotFoundError as 错误信息:
                # 这种情况是数据库那边的问题，或者文件真的不存在
                print(f'重新读取：出现异常 - 文件不存在 {错误信息}')
                pass

        print(f'重新读取：主页缩略图与原图索引重新建立操作完成 - {count}')
